import valve.source.a2s
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = [
    ("185.121.2.222", 27015),
    ("185.121.2.222", 27016),
    ("185.121.2.222", 27017),
    ("185.121.2.222", 27018),
    ("185.121.2.222", 27019),
]

# –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
SUBSCRIBERS = []

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 938543725

# –¢–æ–∫–µ–Ω –¥–ª—è Telegram-–±–æ—Ç–∞
TOKEN = '6607081317:AAEcvKVhk0Km5nSTFa6R3APikiUO6iIZN9g'


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
def get_server_status(ip, port):
    try:
        with valve.source.a2s.ServerQuerier((ip, port)) as server:
            info = server.info()
            players = server.players()
            return {
                "name": info["server_name"],
                "map": info["map"],
                "players": players["players"],
                "max_players": info["max_players"],
            }
    except Exception as e:
        return None


# –ö–æ–º–∞–Ω–¥–∞ /info –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
def info(update: Update, context: CallbackContext):
    response = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö:\n\n"
    for idx, (ip, port) in enumerate(SERVERS, start=1):
        status = get_server_status(ip, port)
        if status:
            response += (
                f"üîπ **–°–µ—Ä–≤–µ—Ä {idx}**: {status['name']}\n"
                f"   –ö–∞—Ä—Ç–∞: {status['map']}\n"
                f"   –ò–≥—Ä–æ–∫–∏: {len(status['players'])}/{status['max_players']}\n"
                f"   –ö–æ–º–∞–Ω–¥–∞: /sv{idx}\n\n"
            )
        else:
            response += f"üîπ –°–µ—Ä–≤–µ—Ä {idx} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
    update.message.reply_text(response, parse_mode="Markdown")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
def generate_server_command(idx, ip, port):
    def server_command(update: Update, context: CallbackContext):
        status = get_server_status(ip, port)
        if status:
            players_list = "\n".join(
                [f"   {i + 1}. {player['name']} ({player['score']} –æ—á–∫–æ–≤)" for i, player in
                 enumerate(status["players"])]
            )
            if not players_list:
                players_list = "   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."
            response = (
                f"üìå **–°–µ—Ä–≤–µ—Ä {idx}**: {status['name']}\n"
                f"–ö–∞—Ä—Ç–∞: {status['map']}\n"
                f"–ò–≥—Ä–æ–∫–∏: {len(status['players'])}/{status['max_players']}\n\n"
                f"üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n{players_list}"
            )
        else:
            response = f"‚ùå –°–µ—Ä–≤–µ—Ä {idx} ({ip}:{port}) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        update.message.reply_text(response, parse_mode="Markdown")

    return server_command


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
def subscribe(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if user_id not in SUBSCRIBERS:
        SUBSCRIBERS.append(user_id)
        update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö.")
    else:
        update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
def unsubscribe(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if user_id in SUBSCRIBERS:
        SUBSCRIBERS.remove(user_id)
        update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def broadcast(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    message = update.message.text.replace("/broadcast", "").strip()
    if not message:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    sent_count = 0
    for subscriber in SUBSCRIBERS:
        try:
            context.bot.send_message(chat_id=subscriber, text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}")
            sent_count += 1
        except Exception:
            pass

    update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")


# –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("info", info))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    for idx, (ip, port) in enumerate(SERVERS, start=1):
        dispatcher.add_handler(CommandHandler(f"sv{idx}", generate_server_command(idx, ip, port)))

    dispatcher.add_handler(CommandHandler("subscribe", subscribe))
    dispatcher.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dispatcher.add_handler(CommandHandler("broadcast", broadcast))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
